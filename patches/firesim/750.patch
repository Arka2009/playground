From b7d69d5faef85ac220aa53948306bf175543f19e Mon Sep 17 00:00:00 2001
From: Jiuyang Liu <liu@jiuyang.me>
Date: Tue, 6 Apr 2021 02:07:53 +0000
Subject: [PATCH] CreateParametersInstancePhase now takes
 ConfigPackageAnnotation from AnnotationSeq

---
 .../CreateParametersInstancePhase.scala       | 30 +++++++++----------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/sim/midas/src/main/scala/midas/stage/phases/CreateParametersInstancePhase.scala b/sim/midas/src/main/scala/midas/stage/phases/CreateParametersInstancePhase.scala
index 628fbcc27..7f4652f36 100644
--- a/sim/midas/src/main/scala/midas/stage/phases/CreateParametersInstancePhase.scala
+++ b/sim/midas/src/main/scala/midas/stage/phases/CreateParametersInstancePhase.scala
@@ -2,14 +2,14 @@
 
 package midas.stage.phases
 
-import midas.OutputDir
-import midas.stage.{ConfigPackageAnnotation, ConfigStringAnnotation}
 import firrtl.AnnotationSeq
-import firrtl.options.{Phase, PreservesAll, Unserializable, TargetDirAnnotation}
 import firrtl.annotations.NoTargetAnnotation
-import freechips.rocketchip.config.{Parameters, Config}
+import firrtl.options.{Phase, PreservesAll, TargetDirAnnotation, Unserializable}
+import freechips.rocketchip.config.{Config, Parameters}
+import midas.OutputDir
+import midas.stage.{ConfigPackageAnnotation, ConfigStringAnnotation}
 
-import java.io.{File}
+import java.io.File
 
 case class ConfigParametersAnnotation(p: Parameters) extends NoTargetAnnotation with Unserializable
 
@@ -53,14 +53,14 @@ class CreateParametersInstancePhase extends Phase with PreservesAll[Phase] {
     new Config(getConfigWithFallback(packages, configClasses))
   }
 
-  override def transform(annotations: AnnotationSeq): AnnotationSeq = {
-    val configPackage = annotations.collectFirst({ case ConfigPackageAnnotation(p) => p }).get
-    val configClasses = annotations.collectFirst({ case ConfigStringAnnotation(s) => s }).get.split('_')
-    val targetDir = annotations.collectFirst({ case TargetDirAnnotation(t) => new File(t) }).get
-
-    // The output directory is specified on the command line; put it in the
-    // parameters object so it is visible to chisel elaborations.
-    val p = getParameters(configPackage, configClasses).alterPartial({ case OutputDir => targetDir })
-    ConfigParametersAnnotation(p) +: annotations
-  }
+  override def transform(annotations: AnnotationSeq): AnnotationSeq = 
+    ConfigParametersAnnotation(annotations.collectFirst{ case ConfigParametersAnnotation(p) => p }.getOrElse {
+      val configPackage = annotations.collectFirst({ case ConfigPackageAnnotation(p) => p }).get
+      val configClasses = annotations.collectFirst({ case ConfigStringAnnotation(s) => s }).get.split('_')
+      getParameters(configPackage, configClasses)
+    }.alterPartial({
+      // The output directory is specified on the command line; put it in the
+      // parameters object so it is visible to chisel elaborations.
+      case OutputDir => annotations.collectFirst({ case TargetDirAnnotation(t) => new File(t) }).get
+    })) +: annotations
 }
