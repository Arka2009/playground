From f832bb16397ce81277b063a5619efa631364efd0 Mon Sep 17 00:00:00 2001
From: Jiuyang Liu <liu@jiuyang.me>
Date: Thu, 17 Jun 2021 09:11:08 +0000
Subject: [PATCH 1/2] kill the driver

---
 .../main/scala/midas/passes/SimulationMapping.scala | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/sim/midas/src/main/scala/midas/passes/SimulationMapping.scala b/sim/midas/src/main/scala/midas/passes/SimulationMapping.scala
index b7880181e..747abcd79 100644
--- a/sim/midas/src/main/scala/midas/passes/SimulationMapping.scala
+++ b/sim/midas/src/main/scala/midas/passes/SimulationMapping.scala
@@ -10,7 +10,7 @@ import scala.collection.mutable
 import firrtl._
 import firrtl.annotations.{CircuitName, ReferenceTarget, ModuleTarget, InstanceTarget}
 import firrtl.options.Dependency
-import firrtl.stage.Forms
+import firrtl.stage.{FirrtlCircuitAnnotation, Forms}
 import firrtl.stage.transforms.Compiler
 import firrtl.ir._
 import firrtl.Mappers._
@@ -18,6 +18,7 @@ import firrtl.passes.LowerTypes.loweredName
 import firrtl.Utils.{BoolType, splitRef, mergeRef, create_exps, flow, module_type}
 import firrtl.passes.wiring._
 import Utils._
+import chisel3.stage.{ChiselGeneratorAnnotation, NoRunFirrtlCompilerAnnotation}
 import freechips.rocketchip.config.Parameters
 import freechips.rocketchip.diplomacy.LazyModule
 
@@ -93,9 +94,13 @@ private[passes] class SimulationMapping(targetName: String) extends firrtl.Trans
 
     // Generate the encapsulating simulator RTL
     lazy val shim = PlatformShim(innerState.annotations, portTypeMap)
-    val c3circuit = chisel3.stage.ChiselStage.elaborate(LazyModule(shim).module)
-    val chirrtl = Parser.parse(chisel3.Driver.emit(c3circuit))
-    val annos = PreLinkRenamingAnnotation(Namespace(innerCircuit)) +: c3circuit.annotations.map(_.toFirrtl)
+    val annos = (new chisel3.stage.ChiselStage).transform(
+      Seq(
+        ChiselGeneratorAnnotation(() => LazyModule(shim).module),
+        NoRunFirrtlCompilerAnnotation
+      )
+    ) :+ PreLinkRenamingAnnotation(Namespace(innerCircuit))
+    val chirrtl = annos.collectFirst { case a: FirrtlCircuitAnnotation => a }.get.circuit
 
     val transforms = Seq(
       Dependency[Fame1Instances],

From f01ce93aa633d2e22788254f872c2aacd423b9b3 Mon Sep 17 00:00:00 2001
From: Jiuyang Liu <liu@jiuyang.me>
Date: Thu, 17 Jun 2021 14:43:11 +0000
Subject: [PATCH 2/2] kill another driver.

---
 .../scala/midas/passes/fame/EmitAndWrapRAMModels.scala     | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/sim/midas/src/main/scala/midas/passes/fame/EmitAndWrapRAMModels.scala b/sim/midas/src/main/scala/midas/passes/fame/EmitAndWrapRAMModels.scala
index b656a29ec..5049a8170 100644
--- a/sim/midas/src/main/scala/midas/passes/fame/EmitAndWrapRAMModels.scala
+++ b/sim/midas/src/main/scala/midas/passes/fame/EmitAndWrapRAMModels.scala
@@ -7,8 +7,8 @@ import firrtl.ir._
 import Mappers._
 import Utils._
 import annotations._
-
-import midas.passes.{PreLinkRenamingAnnotation, PreLinkRenaming}
+import chisel3.stage.{ChiselGeneratorAnnotation, NoRunFirrtlCompilerAnnotation}
+import midas.passes.{PreLinkRenaming, PreLinkRenamingAnnotation}
 
 import collection.mutable
 
@@ -191,8 +191,7 @@ class RAMModelInst(name: String, val readPorts: Seq[ReadPort], val writePorts: S
   }
 
   def elaborateModel(parentCircuitNS: Namespace): Module = {
-    val c3circuit = chisel3.stage.ChiselStage.elaborate(new midas.models.sram.AsyncMemChiselModel(depth.toInt, dataWidth, readPorts.size, writePorts.size))
-    val chirrtl = Parser.parse(chisel3.Driver.emit(c3circuit))
+    val chirrtl = chisel3.stage.ChiselStage.convert(new midas.models.sram.AsyncMemChiselModel(depth.toInt, dataWidth, readPorts.size, writePorts.size))
     val state = new MiddleFirrtlCompiler().compile(CircuitState(chirrtl, ChirrtlForm, Nil), Nil)
     require(state.circuit.modules.length == 1)
     state.circuit.modules.collectFirst({
