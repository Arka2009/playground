From 696f529c24647f9251351eb0555c075917393f7d Mon Sep 17 00:00:00 2001
From: Jiuyang Liu <liu@jiuyang.me>
Date: Wed, 1 Dec 2021 12:13:24 +0800
Subject: [PATCH] get rid of FirrtlTerpBackend.

---
 build.sbt                                     |   3 +-
 build.sc                                      |   3 +-
 .../scala/chisel3/iotesters/ChiselMain.scala  |   4 +-
 .../chisel3/iotesters/ChiselPokeSpec.scala    |   8 +-
 src/main/scala/chisel3/iotesters/Driver.scala |  95 +----------
 .../chisel3/iotesters/FirrtlTerpBackend.scala | 154 ------------------
 .../iotesters/PeekPokeTesterUtils.scala       |   4 +-
 .../chisel3/iotesters/TesterOptions.scala     |   4 +-
 .../scala/chisel3/iotesters/DriverSpec.scala  |   1 -
 .../scala/chisel3/iotesters/EnumSpec.scala    |  10 --
 .../chisel3/iotesters/ZeroWidthIOSpec.scala   |   4 -
 src/test/scala/examples/ALUTester.scala       |   2 +-
 .../scala/examples/AccumBlackBoxSpec.scala    |  35 +---
 src/test/scala/examples/Adder.scala           |  12 --
 src/test/scala/examples/AdvTesterSpec.scala   |  18 --
 .../ConcurrentDecoupledTestingSpec.scala      |   9 -
 src/test/scala/examples/CycleTest.scala       |   8 -
 src/test/scala/examples/GCDSpec.scala         |  18 --
 .../InterpreterVerilatorConsistencySpec.scala |   6 -
 src/test/scala/examples/MultiIOModule.scala   |   6 -
 20 files changed, 16 insertions(+), 388 deletions(-)
 delete mode 100644 src/main/scala/chisel3/iotesters/FirrtlTerpBackend.scala

diff --git a/build.sbt b/build.sbt
index 38ba3c1..5724197 100644
--- a/build.sbt
+++ b/build.sbt
@@ -33,11 +33,10 @@ crossScalaVersions := Seq("2.12.14", "2.13.6")
 val defaultVersions = Map(
   "chisel3" -> "3.5-SNAPSHOT",
   "firrtl" -> "1.5-SNAPSHOT",
-  "firrtl-interpreter" -> "1.5-SNAPSHOT",
   "treadle" -> "1.5-SNAPSHOT"
   )
 
-libraryDependencies ++= Seq("chisel3","firrtl","firrtl-interpreter", "treadle").map { dep: String =>
+libraryDependencies ++= Seq("chisel3","firrtl","treadle").map { dep: String =>
     "edu.berkeley.cs" %% dep % sys.props.getOrElse(dep + "Version", defaultVersions(dep))
 }
 
diff --git a/build.sc b/build.sc
index 292f860..1c52787 100644
--- a/build.sc
+++ b/build.sc
@@ -81,7 +81,6 @@ object chiselTesters extends Cross[ChiselTestersModule](crossVersions: _*) {
 val defaultVersions = Map(
   "chisel3" -> "3.5-SNAPSHOT",
   "firrtl" -> "1.5-SNAPSHOT",
-  "firrtl-interpreter" -> "1.5-SNAPSHOT",
   "treadle" -> "1.5-SNAPSHOT"
   )
 
@@ -93,7 +92,7 @@ def getVersion(dep: String, org: String = "edu.berkeley.cs") = {
 class ChiselTestersModule(val crossScalaVersion: String) extends CommonModule {
   override def artifactName = "chisel-iotesters"
 
-  def chiselDeps = Agg("firrtl", "firrtl-interpreter", "treadle", "chisel3").map { d => getVersion(d) }
+  def chiselDeps = Agg("firrtl", "treadle", "chisel3").map { d => getVersion(d) }
 
   override def ivyDeps = Agg(
     ivy"org.scalatest::scalatest:3.2.2",
diff --git a/src/main/scala/chisel3/iotesters/ChiselMain.scala b/src/main/scala/chisel3/iotesters/ChiselMain.scala
index 2401e4e..4615b51 100644
--- a/src/main/scala/chisel3/iotesters/ChiselMain.scala
+++ b/src/main/scala/chisel3/iotesters/ChiselMain.scala
@@ -161,9 +161,7 @@ object chiselMain {
 
     context.backend = Some(context.backendType match {
       case "firrtl" =>
-        val file = new java.io.File(context.targetDir, s"${dut.name}.ir")
-        val ir = FileUtils.getText(file)
-        new FirrtlTerpBackend(dut, ir)
+       throw new Exception(s"firrtl backend is no longer valid after Chisel 3.5, please switch to other backends.")
       case "verilator" =>
         new VerilatorBackend(dut, context.testCmd.toList, context.testerSeed)
       case "vcs" | "glsim" =>
diff --git a/src/main/scala/chisel3/iotesters/ChiselPokeSpec.scala b/src/main/scala/chisel3/iotesters/ChiselPokeSpec.scala
index 87f6923..489d926 100644
--- a/src/main/scala/chisel3/iotesters/ChiselPokeSpec.scala
+++ b/src/main/scala/chisel3/iotesters/ChiselPokeSpec.scala
@@ -10,9 +10,9 @@ import chisel3.iotesters._
 sealed trait TesterBackend {
   def create[T <: Module](dutGen: () => T, options: TesterOptionsManager): (T, Backend)
 }
-case object FirrtlInterpreterBackend extends TesterBackend {
+case object TreadleBackend extends TesterBackend {
   override def create[T <: Module](dutGen: () => T, options: TesterOptionsManager): (T, Backend) = {
-    setupFirrtlTerpBackend(dutGen, options)
+    setupTreadleBackend(dutGen, options)
   }
 }
 case object VerilatorBackend extends TesterBackend {
@@ -120,7 +120,7 @@ trait PokeTester extends ChiselPokeTesterUtils {
     runTester(dutGen, testerBackend, options) { (tester, dut) => block(tester, dut) }
   }
 
-  def test[T <: Module](dutGen: => T, testerBackend: TesterBackend=FirrtlInterpreterBackend)(block: (InnerTester, T) => Unit) {
+  def test[T <: Module](dutGen: => T, testerBackend: TesterBackend=TreadleBackend)(block: (InnerTester, T) => Unit) {
     val options = new TesterOptionsManager
     test(dutGen, testerBackend, options)(block)
   }
@@ -200,7 +200,7 @@ trait ImplicitPokeTester extends ChiselPokeTesterUtils {
     * }
     * }}}
     */
-  def test[T <: Module](dutGen: => T, testerBackend: TesterBackend=FirrtlInterpreterBackend)(block: InnerTester => (T => Unit)) {
+  def test[T <: Module](dutGen: => T, testerBackend: TesterBackend=TreadleBackend)(block: InnerTester => (T => Unit)) {
     val options = new TesterOptionsManager
     test(dutGen, testerBackend, options)(block)
   }
diff --git a/src/main/scala/chisel3/iotesters/Driver.scala b/src/main/scala/chisel3/iotesters/Driver.scala
index 4ff7a27..ab1b36a 100644
--- a/src/main/scala/chisel3/iotesters/Driver.scala
+++ b/src/main/scala/chisel3/iotesters/Driver.scala
@@ -3,11 +3,11 @@
 package chisel3.iotesters
 
 import chisel3.{ChiselExecutionFailure => _, ChiselExecutionResult => _, ChiselExecutionSuccess => _, _}
-import java.io.File
 
+import java.io.File
 import chisel3.iotesters.DriverCompatibility._
+import firrtl.ExecutionOptionsManager
 import firrtl.annotations.Annotation
-import firrtl_interpreter._
 import logger.{LoggerCompatibility => Logger}
 
 import scala.util.DynamicVariable
@@ -51,7 +51,7 @@ object Driver {
 
         val (dut, backend) = testerOptions.backendName match {
           case "firrtl" =>
-            setupFirrtlTerpBackend(dutGenerator, optionsManager, firrtlSourceOverride)
+            throw new Exception("firrtl interpreter has been deprecated")
           case "treadle" =>
             setupTreadleBackend(dutGenerator, optionsManager)
           case "verilator" =>
@@ -108,85 +108,6 @@ object Driver {
     }
   }
 
-  /**
-    * Start up the interpreter repl with the given circuit
-    * To test a `class X extends Module {}`, add the following code to the end
-    * of the file that defines
-    *
-    * @example {{{
-    *           object XRepl {
-    *             def main(args: Array[String]) {
-    *               val optionsManager = new ReplOptionsManager
-    *               if(optionsManager.parse(args)) {
-    *                 iotesters.Driver.executeFirrtlRepl(() => new X, optionsManager)
-    *               }
-    *             }
-    * }}}
-    * running main will place users in the repl with the circuit X loaded into the repl
-    * @param dutGenerator   Module to run in interpreter
-    * @param optionsManager options
-    * @return
-    */
-  @deprecated("Use Driver#def executeFirrtlRepl[T <: Module](args: Array[String], dutGenerator: () => T)", since = "20210301")
-  def executeFirrtlRepl[T <: Module](
-                                      dutGenerator: () => T,
-                                      optionsManager: ReplOptionsManager = new ReplOptionsManager): Boolean = {
-
-    if (optionsManager.topName.isEmpty) {
-      if (optionsManager.targetDirName == ".") {
-        optionsManager.setTargetDirName("test_run_dir")
-      }
-      val genClassName = dutGenerator.getClass.getName
-      val testerName = genClassName.split("""\$\$""").headOption.getOrElse("") + genClassName.hashCode.abs
-      optionsManager.setTargetDirName(s"${optionsManager.targetDirName}/$testerName")
-    }
-
-    optionsManager.chiselOptions = optionsManager.chiselOptions.copy(runFirrtlCompiler = false)
-    optionsManager.firrtlOptions = optionsManager.firrtlOptions.copy(compilerName = "low")
-
-    Logger.makeScope(optionsManager) {
-      val chiselResult: ChiselExecutionResult = DriverCompatibility.execute(optionsManager, dutGenerator)
-      chiselResult match {
-        case ChiselExecutionSuccess(_, emitted, _) =>
-          optionsManager.replConfig = optionsManager.replConfig.copy(firrtlSource = emitted)
-          FirrtlRepl.execute(optionsManager)
-          true
-        case ChiselExecutionFailure(message) =>
-          println("Failed to compile circuit")
-          false
-      }
-    }
-  }
-  /**
-    * Start up the interpreter repl with the given circuit
-    * To test a `class X extends Module {}`, add the following code to the end
-    * of the file that defines
-    * @example {{{
-    *           object XRepl {
-    *             def main(args: Array[String]) {
-    *               iotesters.Driver.executeFirrtlRepl(args, () => new X)
-    *             }
-    *           }
-    * }}}
-    * running main will place users in the repl with the circuit X loaded into the repl
-    *
-    * @param dutGenerator   Module to run in interpreter
-    * @param args           options from the command line
-    * @return
-    */
-  def executeFirrtlRepl[T <: Module](
-                                    args: Array[String],
-                                      dutGenerator: () => T
-                                      ): Boolean = {
-    val optionsManager = new ReplOptionsManager
-
-    if(optionsManager.parse(args)) {
-      executeFirrtlRepl(dutGenerator, optionsManager)
-    }
-    else {
-      false
-    }
-  }
   /**
     * This is just here as command line way to see what the options are
     * It will not successfully run
@@ -230,7 +151,7 @@ object Driver {
     */
   def apply[T <: Module](
       dutGen: () => T,
-      backendType: String = "firrtl",
+      backendType: String = "treadle",
       verbose: Boolean = false,
       testerSeed: Long = System.currentTimeMillis())(
       testerGen: T => PeekPokeTester[T]): Boolean = {
@@ -297,10 +218,4 @@ object Driver {
       case _ => false
     }
   }
-}
-
-class ReplOptionsManager
-  extends InterpreterOptionsManager
-    with HasChiselExecutionOptions
-    with HasReplConfig
-
+}
\ No newline at end of file
diff --git a/src/main/scala/chisel3/iotesters/FirrtlTerpBackend.scala b/src/main/scala/chisel3/iotesters/FirrtlTerpBackend.scala
deleted file mode 100644
index 0482303..0000000
--- a/src/main/scala/chisel3/iotesters/FirrtlTerpBackend.scala
+++ /dev/null
@@ -1,154 +0,0 @@
-// SPDX-License-Identifier: Apache-2.0
-package chisel3.iotesters
-
-import chisel3.{ChiselExecutionFailure => _, ChiselExecutionResult => _, ChiselExecutionSuccess => _, _}
-import chisel3.internal.InstanceId
-import chisel3.iotesters.DriverCompatibility._
-import firrtl.{FirrtlExecutionFailure, FirrtlExecutionSuccess}
-import firrtl_interpreter._
-
-private[iotesters] class FirrtlTerpBackend(
-    dut: Module,
-    firrtlIR: String,
-    optionsManager: TesterOptionsManager with HasInterpreterSuite = new TesterOptionsManager)
-  extends Backend(_seed = System.currentTimeMillis()) {
-  val interpretiveTester = new InterpretiveTester(firrtlIR, optionsManager)
-  reset(5) // reset firrtl interpreter on construction
-
-  private val portNames = dut.getPorts.flatMap { case chisel3.internal.firrtl.Port(id, dir) =>
-    val pathName = id.pathName
-    getDataNames(pathName.drop(pathName.indexOf('.') + 1), id)
-  }.toMap
-
-  def poke(signal: InstanceId, value: BigInt, off: Option[Int])
-          (implicit logger: TestErrorLog, verbose: Boolean, base: Int): Unit = {
-    signal match {
-      case port: Element =>
-        val name = portNames(port)
-        interpretiveTester.poke(name, value)
-        if (verbose) logger info s"  POKE $name <- ${bigIntToStr(value, base)}"
-
-      case mem: Mem[_] =>
-        val memoryName = mem.pathName.split("""\.""").tail.mkString(".")
-        interpretiveTester.pokeMemory(memoryName, off.getOrElse(0), value)
-        if (verbose) logger info s"  POKE MEMORY $memoryName <- ${bigIntToStr(value, base)}"
-
-      case _ =>
-    }
-  }
-
-  def poke(signal: InstanceId, value: Int, off: Option[Int])
-          (implicit logger: TestErrorLog, verbose: Boolean, base: Int): Unit = {
-    poke(signal, BigInt(value), off)
-  }
-
-  def peek(signal: InstanceId, off: Option[Int])
-          (implicit logger: TestErrorLog, verbose: Boolean, base: Int): BigInt = {
-    signal match {
-      case port: Element =>
-        val name = portNames(port)
-        val result = interpretiveTester.peek(name)
-        if (verbose) logger info s"  PEEK $name -> ${bigIntToStr(result, base)}"
-        result
-
-      case mem: Mem[_] =>
-        val memoryName = mem.pathName.split("""\.""").tail.mkString(".")
-
-        interpretiveTester.peekMemory(memoryName, off.getOrElse(0))
-
-      case _ => BigInt(rnd.nextInt)
-    }
-  }
-
-  def expect(signal: InstanceId, expected: BigInt, msg: => String)
-            (implicit logger: TestErrorLog, verbose: Boolean, base: Int) : Boolean = {
-    signal match {
-      case port: Element =>
-        val name = portNames(port)
-        val got = interpretiveTester.peek(name)
-        val good = got == expected
-        if (verbose || !good) logger info
-           s"""EXPECT AT $stepNumber $msg  $name got ${bigIntToStr(got, base)} expected ${bigIntToStr(expected, base)}""" +
-           s""" ${if (good) "PASS" else "FAIL"}"""
-        if(good) interpretiveTester.expectationsMet += 1
-        good
-      case _ => false
-    }
-  }
-
-  def expect(signal: InstanceId, expected: Int, msg: => String)
-            (implicit logger: TestErrorLog, verbose: Boolean, base: Int) : Boolean = {
-    expect(signal,BigInt(expected), msg)
-  }
-
-  def poke(path: String, value: BigInt)
-          (implicit logger: TestErrorLog, verbose: Boolean, base: Int): Unit = {
-    assert(false)
-  }
-
-  def peek(path: String)
-          (implicit logger: TestErrorLog, verbose: Boolean, base: Int): BigInt = {
-    assert(false)
-    BigInt(rnd.nextInt)
-  }
-
-  def expect(path: String, expected: BigInt, msg: => String)
-            (implicit logger: TestErrorLog, verbose: Boolean, base: Int) : Boolean = {
-    assert(false)
-    false
-  }
-
-  private var stepNumber: Long = 0L
-
-  def step(n: Int)(implicit logger: TestErrorLog): Unit = {
-    stepNumber += n
-    interpretiveTester.step(n)
-  }
-
-  def reset(n: Int = 1): Unit = {
-    interpretiveTester.poke("reset", 1)
-    interpretiveTester.step(n)
-    interpretiveTester.poke("reset", 0)
-  }
-
-  def finish(implicit logger: TestErrorLog): Unit = {
-    interpretiveTester.report()
-  }
-}
-
-private[iotesters] object setupFirrtlTerpBackend {
-  def apply[T <: Module](
-      dutGen: () => T,
-      optionsManager: TesterOptionsManager = new TesterOptionsManager with HasInterpreterOptions,
-      firrtlSourceOverride: Option[String] = None
-  ): (T, Backend) = {
-
-    // the backend must be firrtl if we are here, therefore we want the firrtl compiler
-    optionsManager.firrtlOptions = optionsManager.firrtlOptions.copy(compilerName = "low")
-    // Workaround to propagate Annotations generated from command-line options to second Firrtl
-    // invocation, run after updating compilerName so we only get one emitCircuit annotation
-
-    // generate VcdOutput overrides setting of writeVcd
-    if(optionsManager.testerOptions.generateVcdOutput == "on") {
-      optionsManager.interpreterOptions = optionsManager.interpreterOptions.copy(writeVCD = true)
-    }
-
-    val annos = chisel3.iotesters.Driver.filterAnnotations(firrtl.Driver.getAnnotations(optionsManager).toSeq)
-    optionsManager.firrtlOptions = optionsManager.firrtlOptions.copy(annotations = annos.toList)
-    DriverCompatibility.execute(optionsManager, dutGen) match {
-      case ChiselExecutionSuccess(Some(circuit), _, Some(firrtlExecutionResult)) =>
-        val dut = getTopModule(circuit).asInstanceOf[T]
-        firrtlExecutionResult match {
-          case FirrtlExecutionSuccess(_, compiledFirrtl) =>
-            val firrtlText = firrtlSourceOverride.getOrElse(compiledFirrtl)
-            (dut, new FirrtlTerpBackend(dut, firrtlText, optionsManager = optionsManager))
-          case FirrtlExecutionFailure(message) =>
-            throw new Exception(s"FirrtlBackend: failed firrtl compile message: $message")
-        }
-      case ChiselExecutionFailure(message) =>
-        throw new Exception(s"Problem with compilation in Firrtl Interpreter: $message")
-      case badResult =>
-        throw new Exception(s"Unknown problem with compilation in Firrtl Interpreter, result: ${badResult.toString}")
-    }
-  }
-}
diff --git a/src/main/scala/chisel3/iotesters/PeekPokeTesterUtils.scala b/src/main/scala/chisel3/iotesters/PeekPokeTesterUtils.scala
index ad7bf86..8c8de1c 100644
--- a/src/main/scala/chisel3/iotesters/PeekPokeTesterUtils.scala
+++ b/src/main/scala/chisel3/iotesters/PeekPokeTesterUtils.scala
@@ -473,7 +473,7 @@ private[iotesters] object verilogToVerilator extends EditableBuildCSimulatorComm
 }
 
 private[iotesters] case class BackendException(b: String)
-  extends Exception(s"Unknown backend: $b. Backend should be firrtl, verilator, ivl, vsim, vcs, or glsim")
+  extends Exception(s"Unknown backend: $b. Backend should be verilator, ivl, vsim, vcs, or glsim")
 
 private[iotesters] case class TestApplicationException(exitVal: Int, lastMessage: String)
   extends RuntimeException(lastMessage)
@@ -501,6 +501,4 @@ private[iotesters] object TesterProcess {
   def kill(p: VSIMBackend) {
     kill(p.simApiInterface)
   }
-  def kill(p: FirrtlTerpBackend) {
-  }
 }
diff --git a/src/main/scala/chisel3/iotesters/TesterOptions.scala b/src/main/scala/chisel3/iotesters/TesterOptions.scala
index 4877dcb..6e5c176 100644
--- a/src/main/scala/chisel3/iotesters/TesterOptions.scala
+++ b/src/main/scala/chisel3/iotesters/TesterOptions.scala
@@ -6,7 +6,6 @@ import java.io.File
 
 import chisel3.HasChiselExecutionOptions
 import firrtl.{ComposableOptions, ExecutionOptionsManager, HasFirrtlOptions}
-import firrtl_interpreter.HasInterpreterSuite
 
 import scala.util.matching.Regex
 
@@ -14,7 +13,7 @@ case class TesterOptions(
   isGenVerilog:         Boolean = false,
   isGenHarness:         Boolean = false,
   isCompiling:          Boolean = false,
-  isRunTest:            Boolean = false,
+  isRunTestc:            Boolean = false,
   isVerbose:            Boolean = false,
   displayBase:          Int     = 10,
   testerSeed:           Long    = System.currentTimeMillis,
@@ -189,7 +188,6 @@ trait HasTesterOptions {
 class TesterOptionsManager
   extends ExecutionOptionsManager("chisel-testers")
     with HasTesterOptions
-    with HasInterpreterSuite
     with HasChiselExecutionOptions
     with HasFirrtlOptions
     with HasTreadleSuite {
diff --git a/src/test/scala/chisel3/iotesters/DriverSpec.scala b/src/test/scala/chisel3/iotesters/DriverSpec.scala
index 8e06728..64022fe 100644
--- a/src/test/scala/chisel3/iotesters/DriverSpec.scala
+++ b/src/test/scala/chisel3/iotesters/DriverSpec.scala
@@ -96,7 +96,6 @@ class DriverSpec extends AnyFreeSpec with Matchers {
       val manager = new TesterOptionsManager {
         testerOptions = testerOptions.copy(backendName = "verilator", testCmd = Seq("foo2/VDriverTest"))
         commonOptions = commonOptions.copy(targetDirName = "foo2", topName = "DriverTest")
-        interpreterOptions = interpreterOptions.copy(setVerbose = false, writeVCD = true)
       }
       iotesters.Driver.execute(() => new DriverTest, manager) { c =>
         new DriverTestTester(c)
diff --git a/src/test/scala/chisel3/iotesters/EnumSpec.scala b/src/test/scala/chisel3/iotesters/EnumSpec.scala
index db04ffc..c06109a 100644
--- a/src/test/scala/chisel3/iotesters/EnumSpec.scala
+++ b/src/test/scala/chisel3/iotesters/EnumSpec.scala
@@ -146,10 +146,6 @@ class EnumSpec extends ChiselFlatSpec with Matchers {
 
   behavior of "Enum PeekPokeTesters"
 
-  it should "work with a firrtl backend" in {
-    testPeekPoke(Array("--backend-name", "firrtl")) should be(true)
-  }
-
   it should "work with a treadle backend" in {
     testPeekPoke(Array("--backend-name", "treadle")) should be(true)
   }
@@ -161,12 +157,6 @@ class EnumSpec extends ChiselFlatSpec with Matchers {
 
   behavior of "Enum AdvTester"
 
-  it should "work with a firrtl backend" in {
-    iotesters.Driver.execute(Array("--backend-name", "firrtl"), () => new ReadyValidEnumShifter(4)) { c =>
-      new EnumAdvTester(c)
-    } should be(true)
-  }
-
   it should "work with a treadle backend" in {
     iotesters.Driver.execute(Array("--backend-name", "treadle"), () => new ReadyValidEnumShifter(4)) { c =>
       new EnumAdvTester(c)
diff --git a/src/test/scala/chisel3/iotesters/ZeroWidthIOSpec.scala b/src/test/scala/chisel3/iotesters/ZeroWidthIOSpec.scala
index 8f24368..e7a9091 100644
--- a/src/test/scala/chisel3/iotesters/ZeroWidthIOSpec.scala
+++ b/src/test/scala/chisel3/iotesters/ZeroWidthIOSpec.scala
@@ -32,10 +32,6 @@ class ZeroWidthIOSpec extends ChiselFlatSpec with Matchers {
       c => new ZeroWidthIOTester(c)
     }
 
-  it should "work with firrtl backend" in {
-    test(Array("-tbn", "firrtl")) should be (true)
-  }
-
   it should "work with treadle backend" in {
     test(Array("-tbn", "treadle")) should be (true)
   }
diff --git a/src/test/scala/examples/ALUTester.scala b/src/test/scala/examples/ALUTester.scala
index 54bf71e..4c1fee6 100644
--- a/src/test/scala/examples/ALUTester.scala
+++ b/src/test/scala/examples/ALUTester.scala
@@ -201,7 +201,7 @@ class ALUBizarreInputTester (c: ALU) extends PeekPokeTester (c) {
 class ALUTester extends ChiselFlatSpec {
   behavior of "ALU"
 
-  private val backendNames = Array[String] ("firrtl", "verilator")
+  private val backendNames = Array[String] ("verilator")
   for (backendName <- backendNames) {
     it should s"compute data output according to alu_opcode (with  $backendName)" in {
       Driver(() => new ALU, backendName) {
diff --git a/src/test/scala/examples/AccumBlackBoxSpec.scala b/src/test/scala/examples/AccumBlackBoxSpec.scala
index cb8b091..3137dda 100644
--- a/src/test/scala/examples/AccumBlackBoxSpec.scala
+++ b/src/test/scala/examples/AccumBlackBoxSpec.scala
@@ -36,14 +36,13 @@ trait AccumulatorAbstractInterface extends BaseModule {
 class AccumulatorInterface extends Module with AccumulatorAbstractInterface
 
 import firrtl.ir.Type
-import firrtl_interpreter._
 
 /**
   * This is an implementation of a black box whose verilog is contained inline in AccumulatorBlackBox, an instance of this
   * class will be placed into a black box factory so that it can be passed properly to the firrtl interpreter
   * @param name black box name
   */
-class AccumulatorFirrtlInterpreterBlackBox( val name : String) extends BlackBoxImplementation with ScalaBlackBox {
+class AccumulatorFirrtlInterpreterBlackBox( val name : String) extends ScalaBlackBox {
 
   var ns : BigInt = 0
   var ps : BigInt = 0
@@ -69,30 +68,12 @@ class AccumulatorFirrtlInterpreterBlackBox( val name : String) extends BlackBoxI
         println(s"not positive edge, no action for cycle in $name")
     }
   }
-  def execute(inputValues: Seq[Concrete], tpe: Type, outputName: String): Concrete = {
-    ns = ps + 1
-    TypeInstanceFactory(tpe, ps)
-  }
 
   override def getOutput(inputValues: Seq[BigInt], tpe: Type, outputName: String): BigInt = {
     ps
   }
 }
 
-/**
-  * The factor that will provide firrtl access to the implementations
-  */
-class AccumulatorBlackBoxFactory extends BlackBoxFactory {
-
-  def createInstance(instanceName: String, blackBoxName: String): Option[BlackBoxImplementation] = {
-    println( s"createInstance: $instanceName $blackBoxName")
-    blackBoxName match {
-      case "AccumulatorBlackBox" => Some(add(new AccumulatorFirrtlInterpreterBlackBox(instanceName)))
-      case _               => None
-    }
-  }
-}
-
 class AccumulatorScalaBlackBoxFactory extends ScalaBlackBoxFactory {
 
   def createInstance(instanceName: String, blackBoxName: String): Option[ScalaBlackBox] = {
@@ -143,9 +124,6 @@ class AccumulatorPeekPokeTester[T <: AccumulatorInterface](c:T) extends PeekPoke
 class AccumulatorBlackBoxPeekPokeTest extends AnyFlatSpec with Matchers {
 
   def getOptionsManager(backendName: String): TesterOptionsManager = new TesterOptionsManager {
-    interpreterOptions = interpreterOptions.copy(
-      blackBoxFactories = interpreterOptions.blackBoxFactories :+ new AccumulatorBlackBoxFactory
-    )
     treadleOptions = treadleOptions.copy(
       blackBoxFactories = treadleOptions.blackBoxFactories :+ new AccumulatorScalaBlackBoxFactory,
       setVerbose = false
@@ -161,19 +139,11 @@ class AccumulatorBlackBoxPeekPokeTest extends AnyFlatSpec with Matchers {
     } should be (true)
   }
 
-  it should "work with firrtl" in {
-    chisel3.iotesters.Driver.execute( () => new AccumulatorBlackBoxWrapper, getOptionsManager("firrtl")){ c =>
-      new AccumulatorPeekPokeTester(c)
-    } should be (true)
-  }
-
 }
 
 class AccumulatorBlackBoxPeekPokeTestVerilator extends AnyFlatSpec with Matchers {
 
   val optionsManager: TesterOptionsManager = new TesterOptionsManager {
-    interpreterOptions = interpreterOptions.copy(
-      blackBoxFactories = interpreterOptions.blackBoxFactories :+ new AccumulatorBlackBoxFactory)
     treadleOptions = treadleOptions.copy(
       blackBoxFactories = treadleOptions.blackBoxFactories :+ new AccumulatorScalaBlackBoxFactory
     )
@@ -192,9 +162,6 @@ class AccumulatorBlackBoxPeekPokeTestVerilator extends AnyFlatSpec with Matchers
 class AccumulatorBlackBoxPeekPokeTestVCS extends AnyFlatSpec with Matchers {
 
   val optionsManager: TesterOptionsManager = new TesterOptionsManager {
-    interpreterOptions = interpreterOptions.copy(
-      blackBoxFactories = interpreterOptions.blackBoxFactories :+ new AccumulatorBlackBoxFactory
-    )
     treadleOptions = treadleOptions.copy(
       blackBoxFactories = treadleOptions.blackBoxFactories :+ new AccumulatorScalaBlackBoxFactory
     )
diff --git a/src/test/scala/examples/Adder.scala b/src/test/scala/examples/Adder.scala
index ea94ed6..852bcb0 100644
--- a/src/test/scala/examples/Adder.scala
+++ b/src/test/scala/examples/Adder.scala
@@ -105,12 +105,6 @@ class SignedAdderTester(c: SignedAdder) extends PeekPokeTester(c) {
 }
 
 class SignedAdderSpec extends AnyFreeSpec with Matchers {
-  "tester should returned signed values with interpreter" in {
-    iotesters.Driver.execute(Array("--backend-name", "firrtl", "--target-dir", "test_run_dir"), () => new SignedAdder(16)) { c =>
-      new SignedAdderTester(c)
-    } should be (true)
-  }
-
   "tester should returned signed values with verilator" in {
     iotesters.Driver.execute(Array("--backend-name", "verilator", "--target-dir", "test_run_dir"), () => new SignedAdder(16)) { c =>
       new SignedAdderTester(c)
@@ -146,12 +140,6 @@ class FixedPointAdderTester(c: FixedPointAdder) extends PeekPokeTester(c) {
 }
 
 class FixedPointAdderSpec extends AnyFreeSpec with Matchers {
-  "tester should returned signed values with interpreter" in {
-    iotesters.Driver.execute(Array("--backend-name", "firrtl", "--target-dir", "test_run_dir"), () => new FixedPointAdder(16)) { c =>
-      new FixedPointAdderTester(c)
-    } should be (true)
-  }
-
   //TODO: make this work
   "tester should returned signed values" ignore {
     iotesters.Driver.execute(Array("--backend-name", "verilator", "--target-dir", "test_run_dir"), () => new FixedPointAdder(16)) { c =>
diff --git a/src/test/scala/examples/AdvTesterSpec.scala b/src/test/scala/examples/AdvTesterSpec.scala
index 297359e..927bb19 100644
--- a/src/test/scala/examples/AdvTesterSpec.scala
+++ b/src/test/scala/examples/AdvTesterSpec.scala
@@ -5,7 +5,6 @@ package examples
 import chisel3._
 import chisel3.util._
 import chisel3.iotesters._
-import firrtl_interpreter.InterpreterOptions
 import org.scalatest.flatspec.AnyFlatSpec
 import org.scalatest.matchers.should.Matchers
 
@@ -105,22 +104,5 @@ class AdvTesterSpec extends AnyFlatSpec with Matchers {
       new GCDAdvTester(c)
     } should be (true)
   }
-  it should "run firrtl via command line arguments" in {
-    val args = Array("--backend-name", "firrtl", "--fint-write-vcd")
-    iotesters.Driver.execute(args, () => new RealGCD3) { c =>
-      new GCDAdvTester(c)
-    } should be (true)
-  }
-
-  it should "run firrtl via direct options configuration" in {
-    val manager = new TesterOptionsManager {
-      testerOptions = TesterOptions(backendName = "firrtl")
-      interpreterOptions = InterpreterOptions(writeVCD = true)
-    }
-    val args = Array("--backend-name", "firrtl", "--fint-write-vcd")
-    iotesters.Driver.execute(args, () => new RealGCD3) { c =>
-      new GCDAdvTester(c)
-    } should be (true)
-  }
 }
 
diff --git a/src/test/scala/examples/ConcurrentDecoupledTestingSpec.scala b/src/test/scala/examples/ConcurrentDecoupledTestingSpec.scala
index 8543d1d..eabf6ae 100644
--- a/src/test/scala/examples/ConcurrentDecoupledTestingSpec.scala
+++ b/src/test/scala/examples/ConcurrentDecoupledTestingSpec.scala
@@ -155,15 +155,6 @@ object ConcurrentDecoupledTestingSpec {
 
 class ConcurrentDecoupledTestingSpec extends AnyFreeSpec with Matchers {
   "This demonstrates waiting on multiple independent decoupled interfaces" - {
-    "using interpreter" in {
-      chisel3.iotesters.Driver.execute(
-        Array("--backend-name", "firrtl"),
-        () => new MultiGcdCalculator(ConcurrentDecoupledTestingSpec.parallelEngines)
-      ) { c =>
-        new MultiGcdCalculatorTester(c)
-      } should be(true)
-    }
-
     "using verilator" in {
       chisel3.iotesters.Driver.execute(
         Array("--backend-name", "verilator"),
diff --git a/src/test/scala/examples/CycleTest.scala b/src/test/scala/examples/CycleTest.scala
index 0665a3d..ec81bd5 100644
--- a/src/test/scala/examples/CycleTest.scala
+++ b/src/test/scala/examples/CycleTest.scala
@@ -27,14 +27,6 @@ class HasCycleTester( c:HasCycle) extends PeekPokeTester(c) {
 class HasCycleTest extends AnyFlatSpec with Matchers {
   behavior of "HasCycle"
 
-  it should "work in the interpreter" in {
-    chisel3.iotesters.Driver.execute(
-      // interpreter has it's own loop detector that needs to be disabled as well with --fr-allow-cycles
-      Array( "--no-check-comb-loops", "--backend-name", "firrtl", "--fr-allow-cycles"),
-      () => new HasCycle) { c =>
-      new HasCycleTester( c)
-    } should be ( true)
-  }
   it should "work in verilator" in {
     chisel3.iotesters.Driver.execute(
               Array( "--no-check-comb-loops", "--backend-name", "verilator"),
diff --git a/src/test/scala/examples/GCDSpec.scala b/src/test/scala/examples/GCDSpec.scala
index c9bc67e..1c94e86 100644
--- a/src/test/scala/examples/GCDSpec.scala
+++ b/src/test/scala/examples/GCDSpec.scala
@@ -108,24 +108,6 @@ class GCDSpec extends AnyFlatSpec with Matchers {
     } should be (true)
   }
 
-  it should "run firrtl-interpreter via command line arguments" in {
-    // val args = Array.empty[String]
-    val args = Array("--backend-name", "firrtl", "--fint-write-vcd")
-    iotesters.Driver.execute(args, () => new RealGCD2) { c =>
-      new GCDPeekPokeTester(c)
-    } should be (true)
-  }
-
-  it should "run firrtl via direct options configuration" in {
-    val manager = new TesterOptionsManager {
-      testerOptions = testerOptions.copy(backendName = "firrtl", testerSeed = 7L)
-      interpreterOptions = interpreterOptions.copy(setVerbose = false, writeVCD = true)
-    }
-    iotesters.Driver.execute(() => new RealGCD2, manager) { c =>
-      new GCDPeekPokeTester(c)
-    } should be (true)
-  }
-
   "using verilator backend with suppress-verilator-backend" should "not create a vcd" in {
     iotesters.Driver.execute(
       Array("--backend-name", "verilator", "--generate-vcd-output", "off",
diff --git a/src/test/scala/examples/InterpreterVerilatorConsistencySpec.scala b/src/test/scala/examples/InterpreterVerilatorConsistencySpec.scala
index 63f39a3..dbad638 100644
--- a/src/test/scala/examples/InterpreterVerilatorConsistencySpec.scala
+++ b/src/test/scala/examples/InterpreterVerilatorConsistencySpec.scala
@@ -61,12 +61,6 @@ class ExampleTester(dut: ExampleModule) extends AdvTester(dut){
 }
 
 class InterpreterVerilatorConsistencySpec extends ChiselFlatSpec {
-  "Example" should "show decoupled port controls correctly with interpreter" in {
-    chisel3.iotesters.Driver(() => new ExampleModule,"firrtl"){ c =>
-      new ExampleTester(c)
-    }should be(true)
-  }
-
   "Example" should "show decoupled port controls correctly" in {
     chisel3.iotesters.Driver(() => new ExampleModule,"verilator"){ c =>
       new ExampleTester(c)
diff --git a/src/test/scala/examples/MultiIOModule.scala b/src/test/scala/examples/MultiIOModule.scala
index 2f606a5..7e584f3 100644
--- a/src/test/scala/examples/MultiIOModule.scala
+++ b/src/test/scala/examples/MultiIOModule.scala
@@ -37,10 +37,4 @@ class ModuleSpec extends AnyFlatSpec with Matchers {
       new MultiIOAdderTester(c)
     } should be (true)
   }
-  it should "test correctly for every i/o combination with firrtl" in {
-    val args = Array("--backend-name", "firrtl")
-    iotesters.Driver.execute(args, () => new MultiIOAdder) { c =>
-      new MultiIOAdderTester(c)
-    } should be (true)
-  }
 }
