From 6c501e0e98b2e2e6213198dbf5e52f11fc30cff3 Mon Sep 17 00:00:00 2001
From: Jiuyang Liu <liu@jiuyang.me>
Date: Thu, 7 Oct 2021 15:25:27 +0800
Subject: [PATCH] remove cloneType

---
 src/main/scala/bank.scala                 | 3 ---
 src/main/scala/dcc-mem.scala              | 1 -
 src/main/scala/frontend.scala             | 2 --
 src/main/scala/lane.scala                 | 2 --
 src/main/scala/scalar-fpu-interface.scala | 2 --
 src/main/scala/scalar-fpu.scala           | 1 -
 src/main/scala/types-vmu.scala            | 8 --------
 src/main/scala/util.scala                 | 1 -
 src/main/scala/vmu-addr.scala             | 1 -
 src/main/scala/vmu-sdata.scala            | 1 -
 src/main/scala/vmu-table.scala            | 2 --
 11 files changed, 24 deletions(-)

diff --git a/src/main/scala/bank.scala b/src/main/scala/bank.scala
index 86f29ed..2802dfb 100644
--- a/src/main/scala/bank.scala
+++ b/src/main/scala/bank.scala
@@ -36,13 +36,10 @@ class BankOpIO(implicit p: Parameters) extends VXUBundle()(p) {
 }
 
 class BPQIO(implicit p: Parameters) extends DecoupledIO(new BPQEntry()(p)) {
-  override def cloneType = new BPQIO().asInstanceOf[this.type]
 }
 class BRQIO(implicit p: Parameters) extends DecoupledIO(new BRQEntry()(p)) {
-  override def cloneType = new BRQIO().asInstanceOf[this.type]
 }
 class BWQIO(implicit p: Parameters) extends DecoupledIO(new BWQEntry()(p)) {
-  override def cloneType = new BWQIO().asInstanceOf[this.type]
 }
 
 class BankRWIO(implicit p: Parameters) extends VXUBundle()(p) {
diff --git a/src/main/scala/dcc-mem.scala b/src/main/scala/dcc-mem.scala
index 5746920..936dfdc 100644
--- a/src/main/scala/dcc-mem.scala
+++ b/src/main/scala/dcc-mem.scala
@@ -699,7 +699,6 @@ trait VLUSelect extends DCCParameters {
 class VLUSelectBundle(implicit p: Parameters) extends VXUBundle()(p) with VLUSelect
 class VLUSelectIO(implicit p: Parameters)
   extends DecoupledIO(new VLUSelectBundle()(p)) {
-  override def cloneType: this.type = (new VLUSelectIO()).asInstanceOf[this.type]
 }
 
 class VLUMapper(implicit p: Parameters) extends VXUModule()(p) {
diff --git a/src/main/scala/frontend.scala b/src/main/scala/frontend.scala
index 8c547ce..02954e6 100644
--- a/src/main/scala/frontend.scala
+++ b/src/main/scala/frontend.scala
@@ -11,7 +11,6 @@ class FrontendResp(icacheParams: ICacheParams)(implicit p: Parameters) extends H
   val data = UInt(width = icacheParams.fetchBytes * 8)
   val pf = Bool()
 
-  override def cloneType = new FrontendResp(icacheParams).asInstanceOf[this.type]
 }
 
 class FrontendReq(implicit p: Parameters) extends freechips.rocketchip.tile.CoreBundle()(p) {
@@ -25,7 +24,6 @@ class FrontendIO(cacheParams: ICacheParams)(implicit p: Parameters) extends Hwac
   val resp = Decoupled(new FrontendResp(cacheParams)).flip
   val invalidate = Bool(OUTPUT)
 
-  override def cloneType = new FrontendIO(cacheParams).asInstanceOf[this.type]
 }
 
 class MiniFrontend(val cacheParams: ICacheParams)(implicit p: Parameters) extends HwachaModule()(p) with freechips.rocketchip.tile.HasL1CacheParameters {
diff --git a/src/main/scala/lane.scala b/src/main/scala/lane.scala
index 2d8de33..322ce5c 100644
--- a/src/main/scala/lane.scala
+++ b/src/main/scala/lane.scala
@@ -127,10 +127,8 @@ class LaneAckIO(implicit p: Parameters) extends VXUBundle()(p) {
 }
 
 class LPQIO(implicit p: Parameters) extends DecoupledIO(new LPQEntry()(p)) {
-  override def cloneType = new LPQIO().asInstanceOf[this.type]
 }
 class LRQIO(implicit p: Parameters) extends DecoupledIO(new LRQEntry()(p)) {
-  override def cloneType = new LRQIO().asInstanceOf[this.type]
 }
 
 trait LanePred extends VXUBundle {
diff --git a/src/main/scala/scalar-fpu-interface.scala b/src/main/scala/scalar-fpu-interface.scala
index 2088719..481fd08 100644
--- a/src/main/scala/scalar-fpu-interface.scala
+++ b/src/main/scala/scalar-fpu-interface.scala
@@ -73,13 +73,11 @@ class HwachaFPInput(implicit p: Parameters) extends freechips.rocketchip.tile.FP
   val bSRegs = log2Up(p(HwachaNScalarRegs))
   val in_fmt = UInt(width = 2)
   val tag = UInt(width = bSRegs)
-  override def cloneType = new HwachaFPInput()(p).asInstanceOf[this.type]
 }
 
 class HwachaFPResult(implicit p: Parameters) extends freechips.rocketchip.tile.FPResult {
   val bSRegs = log2Up(p(HwachaNScalarRegs))
   val tag = UInt(width = bSRegs)
-  override def cloneType = new HwachaFPResult()(p).asInstanceOf[this.type]
 }
 
 class ScalarFPUInterface(implicit p: Parameters) extends HwachaModule()(p) with Packing with freechips.rocketchip.tile.HasFPUParameters {
diff --git a/src/main/scala/scalar-fpu.scala b/src/main/scala/scalar-fpu.scala
index 7a31ab0..c4d54c4 100644
--- a/src/main/scala/scalar-fpu.scala
+++ b/src/main/scala/scalar-fpu.scala
@@ -77,7 +77,6 @@ class ScalarFPU(implicit p: Parameters) extends HwachaModule()(p) with HasFPUPar
   class WBInfo extends Bundle {
     val single = Bool()
     val pipeid = UInt(width = log2Ceil(pipes.size))
-    override def cloneType: this.type = new WBInfo().asInstanceOf[this.type]
   }
 
   val wen = Reg(init=Bits(0, maxLatency-1))
diff --git a/src/main/scala/types-vmu.scala b/src/main/scala/types-vmu.scala
index ea011aa..d0dfd16 100644
--- a/src/main/scala/types-vmu.scala
+++ b/src/main/scala/types-vmu.scala
@@ -96,7 +96,6 @@ class VVAQEntry(implicit p: Parameters) extends VMUBundle()(p) {
   val addr = UInt(width = bVAddrExtended)
 }
 class VVAQIO(implicit p: Parameters) extends DecoupledIO(new VVAQEntry()(p)) {
-  override def cloneType = new VVAQIO().asInstanceOf[this.type]
 }
 
 trait VMUAddr extends VMUBundle {
@@ -104,7 +103,6 @@ trait VMUAddr extends VMUBundle {
 }
 class VPAQEntry(implicit p: Parameters) extends VMUAddr
 class VPAQIO(implicit p: Parameters) extends DecoupledIO(new VPAQEntry()(p)) {
-  override def cloneType = new VPAQIO().asInstanceOf[this.type]
 }
 
 
@@ -114,7 +112,6 @@ trait VMUData extends VMUBundle {
 
 class VSDQEntry(implicit p: Parameters) extends VMUData
 class VSDQIO(implicit p: Parameters) extends DecoupledIO(new VSDQEntry()(p)) {
-  override def cloneType = new VSDQIO().asInstanceOf[this.type]
 }
 
 class VCUEntry(implicit p: Parameters) extends VMUBundle()(p) {
@@ -148,7 +145,6 @@ class VLDQEntry(implicit p: Parameters) extends VMUData {
   val meta = new VMTLoadEntry
 }
 class VLDQIO(implicit p: Parameters) extends DecoupledIO(new VLDQEntry()(p)) {
-  override def cloneType = new VLDQIO().asInstanceOf[this.type]
 }
 
 /**********************************************************************/
@@ -170,7 +166,6 @@ class VMUMaskEntry_0(implicit p: Parameters) extends VMUBundle()(p) {
   }
 }
 class VMUMaskIO_0(implicit p: Parameters) extends DecoupledIO(new VMUMaskEntry_0()(p)) {
-  override def cloneType = new VMUMaskIO_0().asInstanceOf[this.type]
 }
 
 class VMUMaskEntry_1(implicit p: Parameters) extends VMUBundle()(p) {
@@ -182,7 +177,6 @@ class VMUMaskIO_1(implicit p: Parameters) extends DecoupledIO(new VMUMaskEntry_1
     val eoff = UInt(INPUT, tlByteAddrBits - 1)
     val last = Bool(INPUT)
   }
-  override def cloneType = new VMUMaskIO_1().asInstanceOf[this.type]
 }
 
 /**********************************************************************/
@@ -196,7 +190,6 @@ class CInt(n: Int) extends Bundle {
     raw := x
   }
   def decode(dummy: Int = 0): UInt = Cat(raw === UInt(0), raw)
-  override def cloneType = new CInt(n).asInstanceOf[this.type]
 }
 
 trait VMUMetaCount extends VMUBundle {
@@ -229,5 +222,4 @@ class VMUAddrEntry(implicit p: Parameters) extends VMUMemOp {
   val meta = new VMUMetaAddr with VMUMetaIndex
 }
 class VMUAddrIO(implicit p: Parameters) extends DecoupledIO(new VMUAddrEntry()(p)) {
-  override def cloneType = new VMUAddrIO().asInstanceOf[this.type]
 }
diff --git a/src/main/scala/util.scala b/src/main/scala/util.scala
index 320399f..3fe9042 100644
--- a/src/main/scala/util.scala
+++ b/src/main/scala/util.scala
@@ -170,7 +170,6 @@ class CounterUpdateIO(sz: Int) extends Bundle {
   val cnt = UInt(OUTPUT, sz)
   val update = Bool(OUTPUT)
 
-  override def cloneType = new CounterUpdateIO(sz).asInstanceOf[this.type]
 }
 
 class LookAheadCounter(reset_cnt: Int, max_cnt: Int, resetSignal: Bool = null)(implicit p: Parameters) extends HwachaModule(_reset = resetSignal)(p) with LaneParameters {
diff --git a/src/main/scala/vmu-addr.scala b/src/main/scala/vmu-addr.scala
index ce6eaaa..eaf9dd0 100644
--- a/src/main/scala/vmu-addr.scala
+++ b/src/main/scala/vmu-addr.scala
@@ -39,7 +39,6 @@ class VMUPipeEntry(implicit p: Parameters) extends VMUBundle()(p) {
   val meta = new VMUMetaAddr
 }
 class VMUPipeIO(implicit p: Parameters) extends DecoupledIO(new VMUPipeEntry()(p)) {
-  override def cloneType = new VMUPipeIO().asInstanceOf[this.type]
 }
 
 
diff --git a/src/main/scala/vmu-sdata.scala b/src/main/scala/vmu-sdata.scala
index 99b210f..d3cba68 100644
--- a/src/main/scala/vmu-sdata.scala
+++ b/src/main/scala/vmu-sdata.scala
@@ -17,7 +17,6 @@ class VMUStoreMeta(implicit p: Parameters) extends VMUMetaStore with VMUMetaCoun
 class VMUStoreIO(implicit p: Parameters) extends VSDQIO()(p) {
   val meta = new VMUStoreMeta().asInput
 
-  override def cloneType = new VMUStoreIO().asInstanceOf[this.type]
 }
 
 class SBox(implicit p: Parameters) extends VMUModule()(p) {
diff --git a/src/main/scala/vmu-table.scala b/src/main/scala/vmu-table.scala
index a90aa96..6c05deb 100644
--- a/src/main/scala/vmu-table.scala
+++ b/src/main/scala/vmu-table.scala
@@ -7,14 +7,12 @@ class TableWIO[T <: Data](gen: => T, sztag: Int)
   extends DecoupledIO(gen) {
   val tag = UInt(INPUT, sztag)
 
-  override def cloneType = new TableWIO(gen, sztag).asInstanceOf[this.type]
 }
 
 class TableRIO[T <: Data](gen: => T, sztag: Int)
   extends ValidIO(UInt(width = sztag)) {
   val record = gen.asInput
 
-  override def cloneType = new TableRIO(gen, sztag).asInstanceOf[this.type]
 }
 
 class Table[T <: Data](n: Int, gen: => T) extends Module {
